import React, { useState, useEffect, useRef } from 'react';
import type { ChatMessage, Planet, SimulationData, ChatTarget } from '../types';
import { startChatSession, continueChat, createImageGenerationPrompt } from '../services/geminiService';
import MarkdownRenderer from './MarkdownRenderer';
import { SCIENTISTS } from '../constants';

interface ChatViewProps {
  planet: Planet;
  simulationData: SimulationData;
  chatTarget: ChatTarget;
  onBack: () => void;
}

const ChatView: React.FC<ChatViewProps> = ({ planet, simulationData, chatTarget, onBack }) => {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  const scientistRoles = SCIENTISTS.map(s => s.name);

  useEffect(() => {
    startChatSession(planet.name, simulationData.cityName, chatTarget);
    
    let initialMessage = '';
    if (chatTarget.role === 'فضانورد') {
        initialMessage = 'سلام! من یک فضانورد هستم. خوشحالم که اینجا هستی. در مورد کدام بخش از این جهان بی‌کران کنجکاوی؟';
    } else if (scientistRoles.includes(chatTarget.role as any)) {
        initialMessage = `سلام، من ${chatTarget.role} هستم. خوشحالم که فرصتی برای گفتگو فراهم شده. چه چیزی ذهن شما را به خود مشغول کرده است؟`;
    } else {
        initialMessage = `سلام! من ${chatTarget.role} شما در شهر ${simulationData.cityName} هستم. چه سوالی دارید؟`;
    }

    setMessages([
      { role: 'model', text: initialMessage }
    ]);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [planet, simulationData, chatTarget]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(scrollToBottom, [messages]);

  const handleSend = async () => {
    if (input.trim() === '' || isLoading) return;

    const userMessage: ChatMessage = { role: 'user', text: input };
    setMessages(prev => [...prev, userMessage]);
    const currentInput = input;
    setInput('');
    setIsLoading(true);

    try {
      const responseText = await continueChat(currentInput);
      const modelMessage: ChatMessage = { role: 'model', text: responseText };
      setMessages(prev => [...prev, modelMessage]);
    } catch (error) {
      const errorMessage: ChatMessage = { role: 'model', text: 'متاسفانه در حال حاضر امکان پاسخگویی وجود ندارد. لطفا بعدا تلاش کنید.' };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleGenerateImage = async () => {
    if (input.trim() === '' || isLoading) return;

    const imageSubject = input;
    const userMessage: ChatMessage = { role: 'user', text: `یک تصویر بساز: ${imageSubject}` };
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);

    try {
        const prompt = await createImageGenerationPrompt(imageSubject);
        const imageUrl = `https://pollinations.ai/p/${encodeURIComponent(prompt)}`;
        const imageMessage: ChatMessage = { role: 'model', imageUrl: imageUrl };
        setMessages(prev => [...prev, imageMessage]);
    } catch (error) {
        const errorMessage: ChatMessage = { role: 'model', text: 'متاسفانه امکان ساخت تصویر وجود ندارد. لطفا بعدا تلاش کنید.' };
        setMessages(prev => [...prev, errorMessage]);
    } finally {
        setIsLoading(false);
    }
  };

  const isSpecialChat = chatTarget.role === 'فضانورد' || scientistRoles.includes(chatTarget.role as any);

  return (
    <div className="flex flex-col h-screen bg-gray-900 text-white p-4">
      <div className="flex items-center justify-between pb-4 border-b border-gray-700">
        <button onClick={onBack} className="bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200">
          &rarr; بازگشت
        </button>
        <div className="text-center">
          <h2 className="text-xl font-bold text-cyan-400">گفتگو با {chatTarget.role}</h2>
          {!isSpecialChat && (
            <p className="text-sm text-gray-400">در شهر {simulationData.cityName}</p>
          )}
        </div>
        <div className="w-24"></div> {/* Spacer */}
      </div>

      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((msg, index) => (
          <div key={index} className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>
            <div className={`max-w-lg p-3 rounded-lg text-base ${msg.role === 'user' ? 'bg-blue-600' : 'bg-gray-700'}`}>
               {msg.imageUrl ? (
                 <img src={msg.imageUrl} alt="Generated by AI" className="rounded-lg" />
               ) : msg.role === 'model' && msg.text ? (
                 <MarkdownRenderer text={msg.text} />
               ) : (
                 <p>{msg.text}</p>
               )}
            </div>
          </div>
        ))}
        {isLoading && (
          <div className="flex justify-start">
            <div className="max-w-lg p-3 rounded-lg bg-gray-700">
              <div className="flex items-center space-x-2 space-x-reverse">
                <div className="w-2 h-2 bg-gray-300 rounded-full animate-pulse"></div>
                <div className="w-2 h-2 bg-gray-300 rounded-full animate-pulse delay-75"></div>
                <div className="w-2 h-2 bg-gray-300 rounded-full animate-pulse delay-150"></div>
              </div>
            </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      <div className="mt-auto p-2 border-t border-gray-700">
        <div className="flex items-center bg-gray-800 rounded-lg p-2">
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSend()}
            placeholder="پیام خود را بنویسید..."
            className="flex-1 bg-transparent text-white placeholder-gray-400 focus:outline-none px-2"
            disabled={isLoading}
          />
          <button
            onClick={handleGenerateImage}
            disabled={isLoading || input.trim() === ''}
            className="text-white rounded-md p-2 hover:bg-cyan-600 disabled:text-gray-500 disabled:cursor-not-allowed"
            title="ساخت تصویر"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
          </button>
          <button
            onClick={handleSend}
            disabled={isLoading || input.trim() === ''}
            className="bg-cyan-500 text-white rounded-md p-2 hover:bg-cyan-600 disabled:bg-gray-600 disabled:cursor-not-allowed"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 transform -rotate-90" fill="none" viewBox="ool 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
            </svg>
          </button>
        </div>
      </div>
    </div>
  );
};

export default ChatView;
